{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetAllUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-getAllUsers"
      }
    },
    "CreateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-createUser"
      }
    },
    "GetUserByNameLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-getUserByName"
      }
    },
    "GetAllQuestionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-getAllQuestions"
      }
    },
    "CreateQuestionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-createQuestion"
      }
    },
    "GetQuestionsByUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-getQuestionsByUser"
      }
    },
    "GetAnswersByUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-getAnswersByUser"
      }
    },
    "GetAnswersByQuestionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-getAnswersByQuestion"
      }
    },
    "CreateAnswerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-createAnswer"
      }
    },
    "GetCommentsByParentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-getCommentsByParent"
      }
    },
    "CreateCommentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-createComment"
      }
    },
    "GetCommentsByUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-aws-api-local-getCommentsByUser"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "serverless-aws-api",
                  "local",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-aws-api-local*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-aws-api-local*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "serverless-aws-api",
              "local",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetAllUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-getAllUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllUsersLogGroup"
      ]
    },
    "CreateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-createUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateUserLogGroup"
      ]
    },
    "GetUserByNameLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-getUserByName",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserByNameLogGroup"
      ]
    },
    "GetAllQuestionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-getAllQuestions",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllQuestionsLogGroup"
      ]
    },
    "CreateQuestionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-createQuestion",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateQuestionLogGroup"
      ]
    },
    "GetQuestionsByUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-getQuestionsByUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetQuestionsByUserLogGroup"
      ]
    },
    "GetAnswersByUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-getAnswersByUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAnswersByUserLogGroup"
      ]
    },
    "GetAnswersByQuestionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-getAnswersByQuestion",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAnswersByQuestionLogGroup"
      ]
    },
    "CreateAnswerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-createAnswer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateAnswerLogGroup"
      ]
    },
    "GetCommentsByParentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-getCommentsByParent",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCommentsByParentLogGroup"
      ]
    },
    "CreateCommentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-createComment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateCommentLogGroup"
      ]
    },
    "GetCommentsByUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-aws-api/local/1740700196272-2025-02-27T23:49:56.272Z/serverless-aws-api.zip"
        },
        "Handler": "lambda/index.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "serverless-aws-api-local-getCommentsByUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Address"
              ]
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "PostgresRDSInstance",
                "Endpoint.Port"
              ]
            },
            "DB_NAME": "mydbname",
            "DB_USER": "dbadmin",
            "DB_PASSWORD": "dbpassword"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCommentsByUserLogGroup"
      ]
    },
    "GetAllUsersLambdaVersioncUjjIdik5PgVUOy385rgyuLRbIX5bJ6FOJ597uXVZY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllUsersLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "CreateUserLambdaVersion5RcnxjPOOIgSHuQp4KYgYRFGNhlGW0NDQuSGKC8us4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUserLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "GetUserByNameLambdaVersionxVq19OR3KY8mwRBMTxDfsccFUiItFoCGozvfMjRur20": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserByNameLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "GetAllQuestionsLambdaVersionYId2XeSjzLag1krf4StIi5ON2nE588IoW5i8fHFlgY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllQuestionsLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "CreateQuestionLambdaVersionE7JSnPIze5skYWOJY7RZyuY3AMwOr2RSImlcaoJrKw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateQuestionLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "GetQuestionsByUserLambdaVersionzJPqyz1P32A8Xjha7kpx1V5uBMOZmFs368OrH3iU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetQuestionsByUserLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "GetAnswersByUserLambdaVersionRODOLt46LTb1Stl0IEKOhmngZWP2KyV2FanNZgpiSg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAnswersByUserLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "GetAnswersByQuestionLambdaVersionpdutqivR7nlljvTVFv3O6az69C8ODi4uOWTnDlfeuo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAnswersByQuestionLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "CreateAnswerLambdaVersion0mBs7z7T6UD95uv0Hp6QT4hjR3A6lPcIAQYoQzcBsE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateAnswerLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "GetCommentsByParentLambdaVersionpbkGr12DgBj0HWOedEE5R8SADk4GcezCBSVsSr3xxRU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCommentsByParentLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "CreateCommentLambdaVersion0CHzEW6tpAMLJ5r3SL5BrPflHTRYfSHmCJi1eOH6LGc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCommentLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "GetCommentsByUserLambdaVersionwnLrEF59naOfgpVVPDiNc1UIDOckZYCElbnEt9d8sI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCommentsByUserLambdaFunction"
        },
        "CodeSha256": "S7iKSWearPTjB+c8c9omjtgMgfglsVP8wGp2jJBb7J8="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "local-serverless-aws-api",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersNameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "{name}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQuestions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "questions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQuestionsUserVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceQuestions"
        },
        "PathPart": "{user}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAnswers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "answers",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAnswersUserVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAnswers"
        },
        "PathPart": "{user}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAnswersQuestionVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAnswers"
        },
        "PathPart": "{question}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceComments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "comments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCommentsParentVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceComments"
        },
        "PathPart": "{parent}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCommentsUserVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceComments"
        },
        "PathPart": "{user}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAllUsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersNameVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersNameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersNameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersNameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserByNameLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUserByNameLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodQuestionsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceQuestions"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllQuestionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAllQuestionsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodQuestionsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceQuestions"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateQuestionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateQuestionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodQuestionsUserVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceQuestionsUserVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetQuestionsByUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetQuestionsByUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAnswersUserVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAnswersUserVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAnswersByUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAnswersByUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAnswersQuestionVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAnswersQuestionVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAnswersByQuestionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAnswersByQuestionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAnswersQuestionVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAnswersQuestionVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateAnswerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateAnswerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCommentsParentVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCommentsParentVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCommentsByParentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetCommentsByParentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCommentsParentVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCommentsParentVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateCommentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateCommentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCommentsUserVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCommentsUserVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCommentsByUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetCommentsByUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1740700184310": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "local"
      },
      "DependsOn": [
        "ApiGatewayMethodUsersGet",
        "ApiGatewayMethodUsersNameVarPost",
        "ApiGatewayMethodUsersNameVarGet",
        "ApiGatewayMethodQuestionsGet",
        "ApiGatewayMethodQuestionsPost",
        "ApiGatewayMethodQuestionsUserVarGet",
        "ApiGatewayMethodAnswersUserVarGet",
        "ApiGatewayMethodAnswersQuestionVarGet",
        "ApiGatewayMethodAnswersQuestionVarPost",
        "ApiGatewayMethodCommentsParentVarGet",
        "ApiGatewayMethodCommentsParentVarPost",
        "ApiGatewayMethodCommentsUserVarGet"
      ]
    },
    "GetAllUsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserByNameLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserByNameLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAllQuestionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllQuestionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateQuestionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateQuestionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetQuestionsByUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetQuestionsByUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAnswersByUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAnswersByUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAnswersByQuestionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAnswersByQuestionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateAnswerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateAnswerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCommentsByParentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCommentsByParentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateCommentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCommentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCommentsByUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCommentsByUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "serverless-aws-api-vpc"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "serverless-aws-api-igw"
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "serverless-aws-api-public-subnet-1"
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "serverless-aws-api-public-subnet-2"
          }
        ]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "serverless-aws-api-private-subnet-1"
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "serverless-aws-api-private-subnet-2"
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "serverless-aws-api-public-rt"
          }
        ]
      }
    },
    "DefaultPublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "InternetGatewayAttachment"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PostgresRDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": "mydbname",
        "Engine": "postgres",
        "EngineVersion": 13.7,
        "DBInstanceClass": "db.t3.micro",
        "AllocatedStorage": 20,
        "StorageType": "gp2",
        "MasterUsername": "dbadmin",
        "MasterUserPassword": "dbpassword",
        "VPCSecurityGroups": [
          {
            "Ref": "PostgresSecurityGroup"
          }
        ],
        "DBSubnetGroupName": {
          "Ref": "PostgresSubnetGroup"
        },
        "BackupRetentionPeriod": 7,
        "MultiAZ": false,
        "PubliclyAccessible": false
      }
    },
    "PostgresSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for Postgres RDS",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 5432,
            "ToPort": 5432,
            "CidrIp": "10.0.0.0/16"
          }
        ]
      }
    },
    "PostgresSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for Postgres RDS",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnet1"
          },
          {
            "Ref": "PrivateSubnet2"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-ServerlessDeploymentBucketName"
      }
    },
    "GetAllUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllUsersLambdaVersioncUjjIdik5PgVUOy385rgyuLRbIX5bJ6FOJ597uXVZY"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-GetAllUsersLambdaFunctionQualifiedArn"
      }
    },
    "CreateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUserLambdaVersion5RcnxjPOOIgSHuQp4KYgYRFGNhlGW0NDQuSGKC8us4"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-CreateUserLambdaFunctionQualifiedArn"
      }
    },
    "GetUserByNameLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserByNameLambdaVersionxVq19OR3KY8mwRBMTxDfsccFUiItFoCGozvfMjRur20"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-GetUserByNameLambdaFunctionQualifiedArn"
      }
    },
    "GetAllQuestionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllQuestionsLambdaVersionYId2XeSjzLag1krf4StIi5ON2nE588IoW5i8fHFlgY"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-GetAllQuestionsLambdaFunctionQualifiedArn"
      }
    },
    "CreateQuestionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateQuestionLambdaVersionE7JSnPIze5skYWOJY7RZyuY3AMwOr2RSImlcaoJrKw"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-CreateQuestionLambdaFunctionQualifiedArn"
      }
    },
    "GetQuestionsByUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetQuestionsByUserLambdaVersionzJPqyz1P32A8Xjha7kpx1V5uBMOZmFs368OrH3iU"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-GetQuestionsByUserLambdaFunctionQualifiedArn"
      }
    },
    "GetAnswersByUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAnswersByUserLambdaVersionRODOLt46LTb1Stl0IEKOhmngZWP2KyV2FanNZgpiSg"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-GetAnswersByUserLambdaFunctionQualifiedArn"
      }
    },
    "GetAnswersByQuestionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAnswersByQuestionLambdaVersionpdutqivR7nlljvTVFv3O6az69C8ODi4uOWTnDlfeuo"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-GetAnswersByQuestionLambdaFunctionQualifiedArn"
      }
    },
    "CreateAnswerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateAnswerLambdaVersion0mBs7z7T6UD95uv0Hp6QT4hjR3A6lPcIAQYoQzcBsE"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-CreateAnswerLambdaFunctionQualifiedArn"
      }
    },
    "GetCommentsByParentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCommentsByParentLambdaVersionpbkGr12DgBj0HWOedEE5R8SADk4GcezCBSVsSr3xxRU"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-GetCommentsByParentLambdaFunctionQualifiedArn"
      }
    },
    "CreateCommentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateCommentLambdaVersion0CHzEW6tpAMLJ5r3SL5BrPflHTRYfSHmCJi1eOH6LGc"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-CreateCommentLambdaFunctionQualifiedArn"
      }
    },
    "GetCommentsByUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCommentsByUserLambdaVersionwnLrEF59naOfgpVVPDiNc1UIDOckZYCElbnEt9d8sI"
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-GetCommentsByUserLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/local"
          ]
        ]
      },
      "Export": {
        "Name": "sls-serverless-aws-api-local-ServiceEndpoint"
      }
    },
    "ApiGatewayEndpoint": {
      "Description": "API Gateway Endpoint",
      "Value": {
        "Fn::Sub": "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/local"
      }
    },
    "ApiDocsUrl": {
      "Description": "API Documentation URL",
      "Value": {
        "Fn::Sub": "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/local/swagger"
      }
    }
  }
}