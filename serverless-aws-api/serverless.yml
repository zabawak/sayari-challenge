service: serverless-aws-api

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  deploymentMethod: direct
  environment:
    DB_HOST: !GetAtt PostgresRDSInstance.Endpoint.Address
    DB_PORT: !GetAtt PostgresRDSInstance.Endpoint.Port
    DB_NAME: ${self:custom.dbName}
    DB_USER: ${self:custom.dbUsername}
    DB_PASSWORD: ${self:custom.dbPassword}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - rds-data:ExecuteStatement
        - rds-data:BatchExecuteStatement
      Resource: "*"

plugins:
  - serverless-localstack
  - serverless-openapi-documentation

custom:
  dbName: mydbname
  dbUsername: dbadmin
  dbPassword: dbpassword
  vpcCidr: 10.0.0.0/16
  privateSubnet1Cidr: 10.0.1.0/24
  privateSubnet2Cidr: 10.0.2.0/24
  publicSubnet1Cidr: 10.0.3.0/24
  publicSubnet2Cidr: 10.0.4.0/24
  localstack:
    stages:
      - local
  documentation:
    api:
      info:
        version: '1.0.0'
        title: 'Stack Overfaux API'
        description: 'REST API for Stack Overfaux platform'
        contact:
          name: 'API Support'
          url: 'https://www.example.com/support'
          email: 'support@example.com'
    models:
      - name: 'UserModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          properties:
            id:
              type: 'integer'
            name:
              type: 'string'
      - name: 'QuestionModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          properties:
            id:
              type: 'integer'
            title:
              type: 'string'
            body:
              type: 'string'
            user_id:
              type: 'integer'
            user_name:
              type: 'string'
            created_at:
              type: 'string'
              format: 'date-time'
            score:
              type: 'integer'
      - name: 'QuestionInputModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          required:
            - title
            - body
            - user_name
          properties:
            title:
              type: 'string'
            body:
              type: 'string'
            user_name:
              type: 'string'
      - name: 'AnswerModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          properties:
            id:
              type: 'integer'
            body:
              type: 'string'
            user_id:
              type: 'integer'
            user_name:
              type: 'string'
            parent_question_id:
              type: 'integer'
            created_at:
              type: 'string'
              format: 'date-time'
            score:
              type: 'integer'
            accepted:
              type: 'boolean'
      - name: 'CommentModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          properties:
            id:
              type: 'integer'
            body:
              type: 'string'
            user_id:
              type: 'integer'
            user_name:
              type: 'string'
            parent_question_id:
              type: 'integer'
            parent_answer_id:
              type: 'integer'
            created_at:
              type: 'string'
              format: 'date-time'
      - name: 'AnswerInputModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          required:
            - body
            - user_name
            - question_id
          properties:
            body:
              type: 'string'
            user_name:
              type: 'string'
            question_id:
              type: 'integer'
      - name: 'CommentInputModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          required:
            - body
            - user_name
            - parent_id
            - parent_type
          properties:
            body:
              type: 'string'
            user_name:
              type: 'string'
            parent_id:
              type: 'integer'
            parent_type:
              type: 'string'
              enum:
                - 'question'
                - 'answer'

functions:
  # User functions
  getAllUsers:
    handler: lambda/index.handler
    events:
      - http:
          path: users
          method: get
          cors: true
          documentation:
            summary: 'Get all users'
            description: 'Returns all registered users'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'UserModel'

  createUser:
    handler: lambda/index.handler
    events:
      - http:
          path: users/{name}
          method: post
          cors: true
          documentation:
            summary: 'Create new user'
            description: 'Creates a new user with the specified name'
            pathParams:
              - name: 'name'
                description: 'Username to create'
            methodResponses:
              - statusCode: 201
                description: 'Successfully registered user'
                responseModels:
                  'application/json': 'UserModel'

  getUserByName:
    handler: lambda/index.handler
    events:
      - http:
          path: users/{name}
          method: get
          cors: true
          documentation:
            summary: 'Get user by name'
            description: 'Gets a user by name'
            pathParams:
              - name: 'name'
                description: 'Username to look up'
            methodResponses:
              - statusCode: 200
                description: 'Successfully returned user'
                responseModels:
                  'application/json': 'UserModel'

  # Question functions
  getQuestions:
    handler: lambda/index.handler
    events:
      - http:
          path: questions
          method: get
          cors: true
          documentation:
            summary: 'Get questions'
            description: 'Gets all questions with optional filtering'
            queryParams:
              - name: 'id'
                description: 'Filter by question ID'
                required: false
              - name: 'user'
                description: 'Filter by username'
                required: false
            methodResponses:
              - statusCode: 200
                description: 'Successfully returned questions'
                responseModels:
                  'application/json': 'QuestionModel'

  createQuestion:
    handler: lambda/index.handler
    events:
      - http:
          path: questions
          method: post
          cors: true
          documentation:
            summary: 'Create new question'
            description: 'Create new question'
            requestModels:
              'application/json': 'QuestionInputModel'
            methodResponses:
              - statusCode: 201
                description: 'Successfully returned question'
                responseModels:
                  'application/json': 'QuestionModel'

  getQuestionById:
    handler: lambda/index.handler
    events:
      - http:
          path: questions
          method: get
          documentation:
            summary: 'Get question by ID'
            description: 'Retrieves a question by its ID'
            pathParams:
              - name: 'id'
                description: 'ID of the question'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'QuestionModel'

  # Answer functions
  getAnswers:
    handler: lambda/index.handler
    events:
      - http:
          path: answers
          method: get
          cors: true
          documentation:
            summary: 'Get answers'
            description: 'Gets all answers with optional filtering'
            queryParams:
              - name: 'id'
                description: 'Filter by answer ID'
                required: false
              - name: 'user'
                description: 'Filter by username'
                required: false
              - name: 'question'
                description: 'Filter by question ID'
                required: false
            methodResponses:
              - statusCode: 200
                description: 'Successfully returned answers'
                responseModels:
                  'application/json': 'AnswerModel'

  createAnswer:
    handler: lambda/index.handler
    events:
      - http:
          path: answers
          method: post
          cors: true
          documentation:
            summary: 'Create new answer'
            description: 'Creates a new answer'
            requestModels:
              'application/json': 'AnswerInputModel'
            methodResponses:
              - statusCode: 201
                description: 'Successfully created answer'
                responseModels:
                  'application/json': 'AnswerModel'

  # Comment functions
  getComments:
    handler: lambda/index.handler
    events:
      - http:
          path: comments
          method: get
          cors: true
          documentation:
            summary: 'Get comments'
            description: 'Gets all comments with optional filtering'
            queryParams:
              - name: 'id'
                description: 'Filter by comment ID'
                required: false
              - name: 'user'
                description: 'Filter by username'
                required: false
              - name: 'parent'
                description: 'Filter by parent ID (question or answer)'
                required: false
            methodResponses:
              - statusCode: 200
                description: 'Successfully returned comments'
                responseModels:
                  'application/json': 'CommentModel'

  createComment:
    handler: lambda/index.handler
    events:
      - http:
          path: comments
          method: post
          cors: true
          documentation:
            summary: 'Create new comment'
            description: 'Creates a new comment'
            requestModels:
              'application/json': 'CommentInputModel'
            methodResponses:
              - statusCode: 201
                description: 'Successfully posted comment'
                responseModels:
                  'application/json': 'CommentModel'

resources:
  Resources:
    # VPC and Network Resources
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: ${self:custom.vpcCidr}
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: ${self:service}-vpc

    # Internet Gateway for public subnets
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-igw

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    # Public Subnets
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: ${self:custom.publicSubnet1Cidr}
        AvailabilityZone: !Select [0, !GetAZs '']
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-1

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: ${self:custom.publicSubnet2Cidr}
        AvailabilityZone: !Select [1, !GetAZs '']
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-2

    # Private Subnets for RDS
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: ${self:custom.privateSubnet1Cidr}
        AvailabilityZone: !Select [0, !GetAZs '']
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: ${self:custom.privateSubnet2Cidr}
        AvailabilityZone: !Select [1, !GetAZs '']
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-2

    # Route Tables
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-public-rt

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable
    
    # RDS Resources
    PostgresRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: ${self:custom.dbName}
        Engine: postgres
        EngineVersion: 13.7
        DBInstanceClass: db.t3.micro
        AllocatedStorage: 20
        StorageType: gp2
        MasterUsername: ${self:custom.dbUsername}
        MasterUserPassword: ${self:custom.dbPassword}
        VPCSecurityGroups:
          - !Ref PostgresSecurityGroup
        DBSubnetGroupName: !Ref PostgresSubnetGroup
        BackupRetentionPeriod: 7
        MultiAZ: false
        PubliclyAccessible: false
        
    PostgresSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Postgres RDS
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: ${self:custom.vpcCidr}
            
    PostgresSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for Postgres RDS
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  Outputs:
    ApiGatewayEndpoint:
      Description: "API Gateway Endpoint"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${opt:stage, 'dev'}"
    ApiDocsUrl:
      Description: "API Documentation URL"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${opt:stage, 'dev'}/swagger"

