service: serverless-aws-api

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  deploymentMethod: direct
  environment:
    DB_HOST: !GetAtt PostgresRDSInstance.Endpoint.Address
    DB_PORT: !GetAtt PostgresRDSInstance.Endpoint.Port
    DB_NAME: ${self:custom.dbName}
    DB_USER: ${self:custom.dbUsername}
    DB_PASSWORD: ${self:custom.dbPassword}

plugins:
  - serverless-localstack
  - serverless-openapi-documentation

custom:
  dbName: mydbname
  dbUsername: dbadmin
  dbPassword: dbpassword
  vpcCidr: 10.0.0.0/16
  privateSubnet1Cidr: 10.0.1.0/24
  privateSubnet2Cidr: 10.0.2.0/24
  publicSubnet1Cidr: 10.0.3.0/24
  publicSubnet2Cidr: 10.0.4.0/24
  localstack:
    stages:
      - local
  documentation:
    api:
      info:
        version: '1.0.0'
        title: 'Stack Overfaux API'
        description: 'REST API for Stack Overfaux platform'
        contact:
          name: 'API Support'
          url: 'https://www.example.com/support'
          email: 'support@example.com'
    models:
      - name: 'UserModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          properties:
            id:
              type: 'integer'
            name:
              type: 'string'
      - name: 'QuestionModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          properties:
            id:
              type: 'integer'
            title:
              type: 'string'
            body:
              type: 'string'
            user_id:
              type: 'integer'
            user_name:
              type: 'string'
            created_at:
              type: 'string'
              format: 'date-time'
            score:
              type: 'integer'
      - name: 'AnswerModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          properties:
            id:
              type: 'integer'
            body:
              type: 'string'
            user_id:
              type: 'integer'
            user_name:
              type: 'string'
            parent_question_id:
              type: 'integer'
            created_at:
              type: 'string'
              format: 'date-time'
            score:
              type: 'integer'
            accepted:
              type: 'boolean'
      - name: 'CommentModel'
        contentType: 'application/json'
        schema:
          type: 'object'
          properties:
            id:
              type: 'integer'
            body:
              type: 'string'
            user_id:
              type: 'integer'
            user_name:
              type: 'string'
            parent_question_id:
              type: 'integer'
            parent_answer_id:
              type: 'integer'
            created_at:
              type: 'string'
              format: 'date-time'

functions:
  # User functions
  getAllUsers:
    handler: lambda/index.handler
    events:
      - http:
          path: users
          method: get
          documentation:
            summary: 'Get all users'
            description: 'Returns all registered users'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'UserModel'

  createUser:
    handler: lambda/index.handler
    events:
      - http:
          path: users/{name}
          method: post
          documentation:
            summary: 'Create new user'
            description: 'Creates a new user with the specified name'
            pathParams:
              - name: 'name'
                description: 'Username to create'
            methodResponses:
              - statusCode: 201
                responseModels:
                  'application/json': 'UserModel'

  getUserByName:
    handler: lambda/index.handler
    events:
      - http:
          path: users/{name}
          method: get
          documentation:
            summary: 'Get user by name'
            description: 'Retrieves a user by their username'
            pathParams:
              - name: 'name'
                description: 'Username to look up'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'UserModel'

  # Question functions
  getAllQuestions:
    handler: lambda/index.handler
    events:
      - http:
          path: questions
          method: get
          documentation:
            summary: 'Get all questions'
            description: 'Returns all questions'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'QuestionModel'

  createQuestion:
    handler: lambda/index.handler
    events:
      - http:
          path: questions
          method: post
          documentation:
            summary: 'Create new question'
            description: 'Creates a new question'
            requestModels:
              'application/json': 'QuestionModel'
            methodResponses:
              - statusCode: 201
                responseModels:
                  'application/json': 'QuestionModel'

  getQuestionById:
    handler: lambda/index.handler
    events:
      - http:
          path: questions/{id}
          method: get
          documentation:
            summary: 'Get question by ID'
            description: 'Retrieves a question by its ID'
            pathParams:
              - name: 'id'
                description: 'ID of the question'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'QuestionModel'

  getQuestionsByUser:
    handler: lambda/index.handler
    events:
      - http:
          path: questions/{user}
          method: get
          documentation:
            summary: 'Get questions by username'
            description: 'Retrieves all questions by a specific user'
            pathParams:
              - name: 'user'
                description: 'Username to filter by'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'QuestionModel'

  # Answer functions
  getAnswersByUser:
    handler: lambda/index.handler
    events:
      - http:
          path: answers/{user}
          method: get
          documentation:
            summary: 'Get answers by username'
            description: 'Retrieves all answers by a specific user'
            pathParams:
              - name: 'user'
                description: 'Username to filter by'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'AnswerModel'

  getAnswersByQuestion:
    handler: lambda/index.handler
    events:
      - http:
          path: answers/{question}
          method: get
          documentation:
            summary: 'Get answers by question'
            description: 'Retrieves all answers to a specific question'
            pathParams:
              - name: 'question'
                description: 'Question ID to filter by'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'AnswerModel'

  createAnswer:
    handler: lambda/index.handler
    events:
      - http:
          path: answers/{question}
          method: post
          documentation:
            summary: 'Create new answer'
            description: 'Creates a new answer for a specific question'
            pathParams:
              - name: 'question'
                description: 'Question ID to answer'
            requestModels:
              'application/json': 'AnswerModel'
            methodResponses:
              - statusCode: 201
                responseModels:
                  'application/json': 'AnswerModel'

  # Comment functions
  getCommentsByParent:
    handler: lambda/index.handler
    events:
      - http:
          path: comments/{parent}
          method: get
          documentation:
            summary: 'Get comments by parent'
            description: 'Retrieves all comments for a question or answer'
            pathParams:
              - name: 'parent'
                description: 'Parent ID (question or answer)'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'CommentModel'

  createComment:
    handler: lambda/index.handler
    events:
      - http:
          path: comments/{parent}
          method: post
          documentation:
            summary: 'Create new comment'
            description: 'Creates a new comment for a question or answer'
            pathParams:
              - name: 'parent'
                description: 'Parent ID (question or answer)'
            requestModels:
              'application/json': 'CommentModel'
            methodResponses:
              - statusCode: 201
                responseModels:
                  'application/json': 'CommentModel'

  getCommentsByUser:
    handler: lambda/index.handler
    events:
      - http:
          path: comments/{user}
          method: get
          documentation:
            summary: 'Get comments by user'
            description: 'Retrieves all comments by a specific user'
            pathParams:
              - name: 'user'
                description: 'Username to filter by'
            methodResponses:
              - statusCode: 200
                responseModels:
                  'application/json': 'CommentModel'

resources:
  Resources:
    # VPC and Network Resources
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: ${self:custom.vpcCidr}
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: ${self:service}-vpc

    # Internet Gateway for public subnets
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-igw

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    # Public Subnets
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: ${self:custom.publicSubnet1Cidr}
        AvailabilityZone: !Select [0, !GetAZs '']
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-1

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: ${self:custom.publicSubnet2Cidr}
        AvailabilityZone: !Select [1, !GetAZs '']
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet-2

    # Private Subnets for RDS
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: ${self:custom.privateSubnet1Cidr}
        AvailabilityZone: !Select [0, !GetAZs '']
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: ${self:custom.privateSubnet2Cidr}
        AvailabilityZone: !Select [1, !GetAZs '']
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-2

    # Route Tables
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-public-rt

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable

    # API Gateway with Swagger UI
    # ApiGatewayRestApi:
    #   Type: AWS::ApiGateway::RestApi
    #   Properties:
    #     Name: stack-overfaux-api
    #     Description: API for Stack Overfaux platform
    #     EndpointConfiguration:
    #       Types:
    #         - REGIONAL
    #     Body:
    #       swagger: '2.0'
    #       info:
    #         version: '1.0.0'
    #         title: Stack Overfaux API
    #         description: REST API for Stack Overfaux platform
    #       basePath: /${opt:stage, 'dev'}
    #       schemes:
    #         - https
    #       consumes:
    #         - application/json
    #       produces:
    #         - application/json
    #       paths:
    #         /users:
    #           get:
    #             summary: Get all users
    #             description: Returns all registered users
    #             responses:
    #               200:
    #                 description: Successful response
    #                 schema:
    #                   type: array
    #                   items:
    #                     $ref: '#/definitions/User'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAllUsers.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #         /users/{name}:
    #           parameters:
    #             - name: name
    #               in: path
    #               required: true
    #               type: string
    #           get:
    #             summary: Get user by name
    #             description: Retrieves a user by their username
    #             responses:
    #               200:
    #                 description: Successful response
    #                 schema:
    #                   $ref: '#/definitions/User'
    #               404:
    #                 description: User not found
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getUserByName.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #           post:
    #             summary: Create new user
    #             description: Creates a new user with the specified name
    #             responses:
    #               201:
    #                 description: User created
    #                 schema:
    #                   $ref: '#/definitions/User'
    #               409:
    #                 description: User already exists
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createUser.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #         /questions:
    #           get:
    #             summary: Get all questions
    #             description: Returns all questions
    #             responses:
    #               200:
    #                 description: Successful response
    #                 schema:
    #                   type: array
    #                   items:
    #                     $ref: '#/definitions/Question'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAllQuestions.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #           post:
    #             summary: Create new question
    #             description: Creates a new question
    #             parameters:
    #               - in: body
    #                 name: questionData
    #                 description: Question object to create
    #                 required: true
    #                 schema:
    #                   $ref: '#/definitions/QuestionInput'
    #             responses:
    #               201:
    #                 description: Question created
    #                 schema:
    #                   $ref: '#/definitions/Question'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createQuestion.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #         /questions/{id}:
    #           get:
    #             summary: Get question by ID
    #             description: Retrieves a question by its ID
    #             parameters:
    #               - name: id
    #                 in: path
    #                 description: ID of the question to retrieve
    #                 required: true
    #                 type: integer
    #             responses:
    #               200:
    #                 description: Successful response
    #                 schema:
    #                   $ref: '#/definitions/Question'
    #               404:
    #                 description: Question not found
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getQuestionById.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #         /questions/{user}:
    #           get:
    #             summary: Get questions by username
    #             description: Retrieves all questions by a specific user
    #             parameters:
    #               - name: user
    #                 in: path
    #                 description: Username to filter by
    #                 required: true
    #                 type: string
    #             responses:
    #               200:
    #                 description: Successful response
    #                 schema:
    #                   type: array
    #                   items:
    #                     $ref: '#/definitions/Question'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getQuestionsByUser.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #         /answers/{user}:
    #           get:
    #             summary: Get answers by username
    #             description: Retrieves all answers by a specific user
    #             parameters:
    #               - name: user
    #                 in: path
    #                 description: Username to filter by
    #                 required: true
    #                 type: string
    #             responses:
    #               200:
    #                 description: Successful response
    #                 schema:
    #                   type: array
    #                   items:
    #                     $ref: '#/definitions/Answer'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAnswersByUser.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #         /answers/{question}:
    #           get:
    #             summary: Get answers by question
    #             description: Retrieves all answers to a specific question
    #             parameters:
    #               - name: question
    #                 in: path
    #                 description: Question ID to filter by
    #                 required: true
    #                 type: integer
    #             responses:
    #               200:
    #                 description: Successful response
    #                 schema:
    #                   type: array
    #                   items:
    #                     $ref: '#/definitions/Answer'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAnswersByQuestion.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #           post:
    #             summary: Create new answer
    #             description: Creates a new answer for a specific question
    #             parameters:
    #               - name: question
    #                 in: path
    #                 description: Question ID to answer
    #                 required: true
    #                 type: integer
    #               - in: body
    #                 name: answerData
    #                 description: Answer object to create
    #                 required: true
    #                 schema:
    #                   $ref: '#/definitions/AnswerInput'
    #             responses:
    #               201:
    #                 description: Answer created
    #                 schema:
    #                   $ref: '#/definitions/Answer'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createAnswer.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #         /comments/{parent}:
    #           get:
    #             summary: Get comments by parent
    #             description: Retrieves all comments for a question or answer
    #             parameters:
    #               - name: parent
    #                 in: path
    #                 description: Parent ID (question or answer)
    #                 required: true
    #                 type: integer
    #             responses:
    #               200:
    #                 description: Successful response
    #                 schema:
    #                   type: array
    #                   items:
    #                     $ref: '#/definitions/Comment'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getCommentsByParent.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #           post:
    #             summary: Create new comment
    #             description: Creates a new comment for a question or answer
    #             parameters:
    #               - name: parent
    #                 in: path
    #                 description: Parent ID (question or answer)
    #                 required: true
    #                 type: integer
    #               - in: body
    #                 name: commentData
    #                 description: Comment object to create
    #                 required: true
    #                 schema:
    #                   $ref: '#/definitions/CommentInput'
    #             responses:
    #               201:
    #                 description: Comment created
    #                 schema:
    #                   $ref: '#/definitions/Comment'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createComment.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #         /comments/{user}:
    #           get:
    #             summary: Get comments by user
    #             description: Retrieves all comments by a specific user
    #             parameters:
    #               - name: user
    #                 in: path
    #                 description: Username to filter by
    #                 required: true
    #                 type: string
    #             responses:
    #               200:
    #                 description: Successful response
    #                 schema:
    #                   type: array
    #                   items:
    #                     $ref: '#/definitions/Comment'
    #             x-amazon-apigateway-integration:
    #               uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getCommentsByUser.Arn}/invocations"
    #               passthroughBehavior: when_no_match
    #               httpMethod: POST
    #               type: aws_proxy
    #       definitions:
    #         User:
    #           type: object
    #           properties:
    #             id:
    #               type: integer
    #             name:
    #               type: string
    #         Question:
    #           type: object
    #           properties:
    #             id:
    #               type: integer
    #             title:
    #               type: string
    #             body:
    #               type: string
    #             created_at:
    #               type: string
    #               format: date-time
    #             score:
    #               type: integer
    #             user_id:
    #               type: integer
    #             user_name:
    #               type: string
    #             answer_count:
    #               type: integer
    #         QuestionInput:
    #           type: object
    #           required:
    #             - title
    #             - body
    #             - user_name
    #           properties:
    #             title:
    #               type: string
    #             body:
    #               type: string
    #             user_name:
    #               type: string
    #         Answer:
    #           type: object
    #           properties:
    #             id:
    #               type: integer
    #             body:
    #               type: string
    #             created_at:
    #               type: string
    #               format: date-time
    #             score:
    #               type: integer
    #             user_id:
    #               type: integer
    #             user_name:
    #               type: string
    #             parent_question_id:
    #               type: integer
    #             accepted:
    #               type: boolean
    #         AnswerInput:
    #           type: object
    #           required:
    #             - body
    #             - user_name
    #           properties:
    #             body:
    #               type: string
    #             user_name:
    #               type: string
    #         Comment:
    #           type: object
    #           properties:
    #             id:
    #               type: integer
    #             body:
    #               type: string
    #             user_id:
    #               type: integer
    #             user_name:
    #               type: string
    #             parent_question_id:
    #               type: integer
    #             parent_answer_id:
    #               type: integer
    #             created_at:
    #               type: string
    #               format: date-time
    #         CommentInput:
    #           type: object
    #           required:
    #             - body
    #             - user_name
    #             - parent_type
    #           properties:
    #             body:
    #               type: string
    #             user_name:
    #               type: string
    #             parent_type:
    #               type: string
    #               enum:
    #                 - question
    #                 - answer
    #       x-amazon-apigateway-binary-media-types:
    #         - 'application/json'
    #       x-amazon-apigateway-gateway-responses:
    #         DEFAULT_4XX:
    #           responseParameters:
    #             gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    #         DEFAULT_5XX:
    #           responseParameters:
    #             gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    
    # # Deploy API Gateway
    # ApiGatewayDeployment:
    #   Type: AWS::ApiGateway::Deployment
    #   DependsOn:
    #     - ApiGatewayRestApi
    #   Properties:
    #     RestApiId: !Ref ApiGatewayRestApi
    #     StageName: ${opt:stage, 'dev'}
    
    # # Enable Swagger UI
    # ApiGatewayDocumentation:
    #   Type: AWS::ApiGateway::DocumentationPart
    #   Properties:
    #     RestApiId: !Ref ApiGatewayRestApi
    #     Location:
    #       Type: API
    #     Properties:
    #       info:
    #         description: 'API Documentation for Stack Overfaux'
    
    # RDS Resources
    PostgresRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: ${self:custom.dbName}
        Engine: postgres
        EngineVersion: 13.7
        DBInstanceClass: db.t3.micro
        AllocatedStorage: 20
        StorageType: gp2
        MasterUsername: ${self:custom.dbUsername}
        MasterUserPassword: ${self:custom.dbPassword}
        VPCSecurityGroups:
          - !Ref PostgresSecurityGroup
        DBSubnetGroupName: !Ref PostgresSubnetGroup
        BackupRetentionPeriod: 7
        MultiAZ: false
        PubliclyAccessible: false
        
    PostgresSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Postgres RDS
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: ${self:custom.vpcCidr}
            
    PostgresSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for Postgres RDS
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  Outputs:
    ApiGatewayEndpoint:
      Description: "API Gateway Endpoint"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${opt:stage, 'dev'}"
    ApiDocsUrl:
      Description: "API Documentation URL"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${opt:stage, 'dev'}/swagger"

